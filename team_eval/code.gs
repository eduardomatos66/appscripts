var COL_NOME = 0;
var COL_GERENTE = 1;
var COL_TIME = 2;
var COL_SUBTIME = 3;
var COL_PLANEJADADA = 4;
var COL_AVALIADOR_1 = 5;
var COL_AVALIADOR_2 = 6;
var COL_AVALIADOR_3 = 7;
var COL_AVALIADOR_4 = 8;
var COL_FOLDER_ID = 9;
var COL_FORM_LINK = 10;
var COL_FORMID = 11;
var COL_EMAIL_ENVIADO = 12;
var COL_RESULTADO_COLETADO = 13;

var SHEET_NAME = 'Avaliações Automáticas'

function onOpen() {
  const ui = SpreadsheetApp.getUi();
  const menu = ui.createMenu('AUTO');
  menu.addItem('Create Forms', 'create_form');
  menu.addItem('Send Emails', 'send_email');
  menu.addItem('Generate Reports', 'generateReports');
  menu.addToUi();
}

/**
 * CREATE FORM
 */
function create_form() {
  //This value should be the id of your document template that we created in the last step
  var template = DriveApp.getFileById('...................elTVJ78w0');
  //Here we store the sheet as a variable
  // var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME)
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME)
  
  //Now we get all of the values as a 2D array
  var rows = sheet.getDataRange().getValues();

  //Start processing each spreadsheet row
  rows.forEach(function(row, index){
    //Here we check if this row is the headers, if so we skip it
    if (index === 0) return;
    //Here we check if a document has already been generated by looking at 'Document Link', if so we skip it
    if (row[COL_FORM_LINK]) return;
    var date = Utilities.formatDate(row[COL_PLANEJADADA], "GMT", "MMM/yyyy");
    //Using the row data in a template literal, we make a copy of our template form in our destinationFolder
    var copy = template.makeCopy(`AVALIAÇÃO MÚLTIPLA ${date} - ${row[COL_NOME]}`, DriveApp.getFolderById(`${row[COL_FOLDER_ID]}`))

    //Once we have the copy, we then open it using the DocumentApp
    var form = FormApp.openById(copy.getId())
    form.setTitle(`AVALIAÇÃO MÚLTIPLA ${date} - ${row[COL_NOME]}`)
    form.addEditors(['ejvm@cin.ufpe.br'])

    //Store the url of our new document in a variable
    var url = copy.getUrl();
    //Write that value back to the 'Document Link' column in the spreadsheet. 
    sheet.getRange(index+1, COL_FORM_LINK+1).setValue(url)
  })
}

/**
 * SEND EMAIL
 */
function send_email() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME)
  //Now we get all of the values as a 2D array
  var rows = sheet.getDataRange().getValues();
  rows.forEach(function(row, index){
    if (index === 0) return;
    if (row[COL_EMAIL_ENVIADO]) return;

    var message = `Olá, 
    
............... ${row[COL_NOME]}.
Link para o form: ${row[COL_FORM_LINK]}

Asseguramos que a identidade dos avaliadores será preservada.

Regards!`;

    var subject = `Avaliação Múltipla: ${row[COL_NOME]} - ${row[3]}`;
    var bcc = ` ejvm@cin.ufpe.br, ${row[COL_GERENTE]}@cin.ufpe.br`;
    var enviado = false;

    if (row[COL_AVALIADOR_1]) {
      GmailApp.sendEmail(`${row[5]}@cin.ufpe.br`, subject, message, {bcc: bcc});
      enviado = true;
    }
    if (row[COL_AVALIADOR_2]) {
      GmailApp.sendEmail(`${row[6]}@cin.ufpe.br`, subject, message, {bcc: bcc});
      enviado = true;
    }

    if (row[COL_AVALIADOR_3]) {
      GmailApp.sendEmail(`${row[7]}@cin.ufpe.br`, subject, message, {bcc: bcc});
      enviado = true;
    }
    if (row[COL_AVALIADOR_4]) {
      GmailApp.sendEmail(`${row[8]}@cin.ufpe.br`, subject, message, {bcc: bcc});
      enviado = true;
    }
    if (enviado) sheet.getRange(index+1, COL_EMAIL_ENVIADO+1).setValue('ENVIADO');
  })
}

/**
 * GENERATE REPORTS
 */
function generateReports() {
  //const destinationFolder = DriveApp.getFolderById('1ZXFtg863Uah3ey4HzcUB3MvU3geowZWD')
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME)
  
  //Now we get all of the values as a 2D array
  const rows = sheet.getDataRange().getValues();  
  //Start processing each spreadsheet row
  rows.forEach(function(row, index){
    //Here we check if this row is the headers, if so we skip it
    if (index === 0) return;
    //Here we check if a document has already been generated by looking at 'Document Link', if so we skip it
    if (row[COL_RESULTADO_COLETADO]) return;
    if (row[COL_FORMID] == "-" || row[COL_FORMID] == "") return;

    var itemListResponses = loadFormResponses(row[COL_FORMID]);
    var date = Utilities.formatDate(row[COL_PLANEJADADA], "GMT", "MMM/yyyy");
    var doc = generateReport(itemListResponses, date, row[COL_NOME]);
    var destinationFolder = DriveApp.getFolderById(row[COL_FOLDER_ID]);
    var file = DriveApp.getFileById(doc.getId());
    destinationFolder.addFile(file);   

    sheet.getRange(index+1, COL_RESULTADO_COLETADO+1).setValue(doc.getUrl());
  })
}

function loadFormResponses(formId) {
    const headers = ["COMUNICAÇÃO", "RELACIONAMENTO INTERPESSOAL", "LIDERANÇA TRANSFORMACIONAL", "COMPROMETIMENTO", "RESILIÊNCIA E RESOLUÇÃO DE CONFLITOS", "CONHECIMENTO TÉCNICO", "QUALIDADE DO TRABALHO", "INICIATIVA E INOVAÇÃO", "AUTONOMIA E DOMÍNIO SOBRE O NEGÓCIO", "AUTODESENVOLVIMENTO", "PLANEJAMENTO, ANÁLISE DE RISCOS E DIRECIONAMENTO ANALÍTICO"]
    var form = FormApp.openById(formId)
    var responses = form.getResponses()
    var itemListResponses = []
    for (var i = 0; i < responses.length; i++) {
      var responseItems = responses[i].getItemResponses()
      var hearderId = -1;
      for (var j = 0; j < responseItems.length; j++) {
        var itemTitle = responseItems[j].getItem().getTitle();
        if (itemTitle.indexOf("1)") > -1) {
          hearderId += 1;
        }        
        var hearder = headers[hearderId];
        var itemResponse = responseItems[j].getResponse();
        appendResponseToItemList(itemListResponses, hearder, itemTitle, itemResponse)
        Logger.log("%s : %s - %s", hearder, itemTitle, itemResponse);
      }
    }
    Logger.log("Items with response: %s", itemListResponses.length)
    return itemListResponses;
}

function appendResponseToItemList(itemListResponses, hearder, itemTitle, itemResponse) {
  var i = 0;
  var found = false;
  while (!found && i < itemListResponses.length){
    if (itemListResponses[i].getItemTitle() == itemTitle) {
      itemListResponses[i].appendItemResponse(itemResponse);
      found = true;
    }
    i += 1;
  }
  if (!found) {
    itemListResponses.push(new ResponseItem(hearder, itemTitle, itemResponse))
  }
}

function createPieChart(responseItem) {
  var rows = [];
  for (var i = 0; i < responseItem.getItemResponses().length; i++) {
    if (rows.length == 0) {
        rows.push([responseItem.getItemResponses()[i], 1])
    } else {
      var found = false;
      var rowNum = 0;
      while (!found && rowNum < rows.length) {
        if (rows[rowNum][0] == responseItem.getItemResponses()[i]) {
          found = true;
          rows[rowNum][1] += 1
        }
        rowNum++;
      }
      if (!found) {
        rows.push([responseItem.getItemResponses()[i], 1])
      }
    }
  }

  var data = Charts.newDataTable()
    .addColumn(Charts.ColumnType.STRING, "Item")
    .addColumn(Charts.ColumnType.NUMBER, "#");
  for (var i = 0; i < rows.length; i++) {
    data.addRow(rows[i]);
  }
  data.build();

  var chartBuilder = Charts.newPieChart()
      .setDimensions(500, 200)
      .set3D()
      .setDataTable(data)

  return chartBuilder.build();
}

function generateReport(itemListResponses, mesAno, nome) {
  var doc = DocumentApp.create(`Avaliação Múltipla - ${mesAno} - ${nome}`);
  var body = doc.getBody();
  var latestHeader = "";
  for (var i = 0; i < itemListResponses.length; i++) { 

    if (latestHeader.indexOf(itemListResponses[i].getHeader()) < 0) {
      latestHeader = itemListResponses[i].getHeader();
      // Append a paragraph, with heading 3.
      var par1 = body.appendParagraph(latestHeader);
      par1.setHeading(DocumentApp.ParagraphHeading.HEADING3);
    }

    var it = body.appendParagraph(itemListResponses[i].getItemTitle());
    it.setBold(true);

    if (itemListResponses[i].getItemTitle().indexOf('Comentários sobre') > -1) {
      comments = itemListResponses[i].getItemResponses();
      for (var j = 0; j < comments.length; j++) {
        var comm = body.appendParagraph(comments[j]);
        comm.setBold(false);
      }
    } else {
        var chart = createPieChart(itemListResponses[i])
        body.appendImage(chart.getBlob());

    }
  } 
  return doc;
}

class ResponseItem {
  constructor(header, itemTitle, itemResponse) {
      this.header = header;
      this.itemTitle = itemTitle;
      this.itemResponses = [itemResponse];
  }

  getHeader() {
    return this.header;
  }

  getItemTitle() {
    return this.itemTitle;
  }

  getItemResponses() {
    return this.itemResponses;
  }

  appendItemResponse(itemResponse) {
    this.itemResponses.push(itemResponse);
  }
}


